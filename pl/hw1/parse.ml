type token =
  | IDENTIFIER of (string)
  | INT of (int)
  | PLUS
  | MINUS
  | TIMES
  | TRUE
  | FALSE
  | EQ_TOK
  | LE_TOK
  | NOT
  | AND
  | OR
  | SKIP
  | SET
  | SEMICOLON
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | LET
  | IN
  | PRINT
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | EOF

open Parsing;;
# 2 "parse.mly"
(* Graduate Programming Languages - Wes Weimer
 * 
 * Parser for our IMP concrete syntax. 
 * See http://caml.inria.fr/pub/docs/manual-ocaml/manual026.html
 * but basically it works just like Yacc/Bison.
 * See http://en.wikipedia.org/wiki/YACC
 *)

open Imp		    (* IMP abstract syntax 	*)

let error msg	= failwith msg

# 46 "parse.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* TIMES *);
  262 (* TRUE *);
  263 (* FALSE *);
  264 (* EQ_TOK *);
  265 (* LE_TOK *);
  266 (* NOT *);
  267 (* AND *);
  268 (* OR *);
  269 (* SKIP *);
  270 (* SET *);
  271 (* SEMICOLON *);
  272 (* IF *);
  273 (* THEN *);
  274 (* ELSE *);
  275 (* WHILE *);
  276 (* DO *);
  277 (* LET *);
  278 (* IN *);
  279 (* PRINT *);
  280 (* LPAREN *);
  281 (* RPAREN *);
  282 (* LBRACE *);
  283 (* RBRACE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IDENTIFIER *);
  258 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\003\000\003\000\003\000\003\000\001\000\001\000\
\003\000\003\000\002\000\003\000\003\000\001\000\003\000\003\000\
\006\000\004\000\006\000\002\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\001\000\007\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\021\000\000\000\006\000\
\000\000\000\000\005\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\010\000\018\000\019\000"

let yysindex = "\006\000\
\040\255\000\000\244\254\000\000\004\255\004\255\019\255\041\255\
\040\255\009\255\041\255\000\000\000\000\000\000\000\000\004\255\
\041\255\086\255\075\255\065\255\018\255\093\255\241\254\040\255\
\093\255\000\000\043\255\041\255\041\255\041\255\041\255\041\255\
\004\255\004\255\040\255\040\255\041\255\000\000\009\255\000\000\
\028\255\028\255\000\000\093\255\093\255\032\255\000\000\034\255\
\009\255\066\255\040\255\040\255\009\255\009\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
\001\000\021\000\000\000\061\255\063\255\254\254\000\000\000\000\
\017\000\000\000\000\000\000\000\029\000\032\000"

let yygindex = "\000\000\
\255\255\008\000\253\255"

let yytablesize = 315
let yytable = "\024\000\
\003\000\011\000\020\000\016\000\012\000\013\000\001\000\023\000\
\012\000\014\000\015\000\038\000\026\000\016\000\012\000\022\000\
\018\000\012\000\025\000\021\000\004\000\020\000\039\000\024\000\
\027\000\037\000\015\000\017\000\017\000\046\000\047\000\019\000\
\030\000\048\000\049\000\041\000\042\000\043\000\044\000\045\000\
\003\000\012\000\013\000\034\000\050\000\028\000\029\000\030\000\
\024\000\053\000\054\000\051\000\004\000\022\000\000\000\005\000\
\000\000\000\000\006\000\000\000\007\000\000\000\008\000\000\000\
\017\000\009\000\000\000\040\000\028\000\029\000\030\000\009\000\
\009\000\010\000\010\000\033\000\034\000\009\000\000\000\010\000\
\009\000\000\000\010\000\000\000\036\000\033\000\034\000\052\000\
\028\000\029\000\030\000\035\000\000\000\031\000\032\000\028\000\
\029\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\003\000\000\000\000\000\000\000\
\003\000\003\000\000\000\003\000\003\000\000\000\000\000\003\000\
\000\000\003\000\003\000\000\000\003\000\016\000\003\000\004\000\
\004\000\003\000\000\000\003\000\004\000\004\000\016\000\004\000\
\004\000\000\000\018\000\004\000\020\000\004\000\004\000\020\000\
\004\000\015\000\004\000\018\000\015\000\004\000\017\000\004\000\
\020\000\019\000\000\000\000\000\000\000\015\000\000\000\017\000\
\000\000\000\000\019\000"

let yycheck = "\015\001\
\000\000\014\001\006\000\000\000\001\001\002\001\001\000\009\000\
\011\001\006\001\007\001\027\001\016\000\010\001\017\001\008\000\
\000\000\020\001\011\000\001\001\000\000\000\000\024\000\015\001\
\017\000\008\001\000\000\024\001\000\000\033\000\034\000\000\000\
\005\001\035\000\036\000\028\000\029\000\030\000\031\000\032\000\
\001\001\001\001\002\001\012\001\037\000\003\001\004\001\005\001\
\015\001\051\000\052\000\018\001\013\001\000\000\255\255\016\001\
\255\255\255\255\019\001\255\255\021\001\255\255\023\001\255\255\
\024\001\026\001\255\255\025\001\003\001\004\001\005\001\011\001\
\012\001\011\001\012\001\011\001\012\001\017\001\255\255\017\001\
\020\001\255\255\020\001\255\255\020\001\011\001\012\001\022\001\
\003\001\004\001\005\001\017\001\255\255\008\001\009\001\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\255\255\255\255\
\008\001\009\001\255\255\011\001\012\001\255\255\255\255\015\001\
\255\255\017\001\018\001\255\255\020\001\018\001\022\001\003\001\
\004\001\025\001\255\255\027\001\008\001\009\001\027\001\011\001\
\012\001\255\255\018\001\015\001\015\001\017\001\018\001\018\001\
\020\001\015\001\022\001\027\001\018\001\025\001\018\001\027\001\
\027\001\018\001\255\255\255\255\255\255\027\001\255\255\027\001\
\255\255\255\255\027\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  TRUE\000\
  FALSE\000\
  EQ_TOK\000\
  LE_TOK\000\
  NOT\000\
  AND\000\
  OR\000\
  SKIP\000\
  SET\000\
  SEMICOLON\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  LET\000\
  IN\000\
  PRINT\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  EOF\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 59 "parse.mly"
                                             ( Const(_1) )
# 250 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parse.mly"
                                             ( Var(_1) )
# 257 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 61 "parse.mly"
                                             ( Add(_1,_3) )
# 265 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 62 "parse.mly"
                                             ( Sub(_1,_3) )
# 273 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 63 "parse.mly"
                                             ( Mul(_1,_3) )
# 281 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'aexp) in
    Obj.repr(
# 64 "parse.mly"
                                             ( _2 )
# 288 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parse.mly"
                                             ( True )
# 294 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parse.mly"
                                             ( False )
# 300 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 69 "parse.mly"
                                             ( EQ(_1,_3) )
# 308 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 70 "parse.mly"
                                             ( LE(_1,_3) )
# 316 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 71 "parse.mly"
                                             ( Not(_2) )
# 323 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 72 "parse.mly"
                                             ( And(_1,_3) )
# 331 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 73 "parse.mly"
                                             ( Or(_1,_3) )
# 339 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parse.mly"
                                             ( Skip )
# 345 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 77 "parse.mly"
                                             ( Set(_1,_3) )
# 353 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Imp.com) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Imp.com) in
    Obj.repr(
# 78 "parse.mly"
                                             ( Seq(_1,_3) )
# 361 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'bexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Imp.com) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Imp.com) in
    Obj.repr(
# 79 "parse.mly"
                                             ( If(_2,_4,_6) )
# 370 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Imp.com) in
    Obj.repr(
# 80 "parse.mly"
                                             ( While(_2,_4) )
# 378 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Imp.com) in
    Obj.repr(
# 81 "parse.mly"
                                             ( Let(_2,_4,_6) )
# 387 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 82 "parse.mly"
                                             ( Print(_2) )
# 394 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Imp.com) in
    Obj.repr(
# 83 "parse.mly"
                                             ( _2 )
# 401 "parse.ml"
               : Imp.com))
(* Entry com *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let com (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Imp.com)
