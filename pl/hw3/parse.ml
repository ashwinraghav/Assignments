type token =
  | STRING of (string)
  | CHAR of (char)
  | DOT
  | LBRACKET
  | RBRACKET
  | MINUS
  | EMPTY
  | BAR
  | STAR
  | PLUS
  | QUESTION
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
# 2 "parse.mly"
(* 
 * Wes Weimer - Graduate Programming Languages
 * 
 * Parser for our RE concrete syntax. 
 * See http://caml.inria.fr/pub/docs/manual-ocaml/manual026.html
 * but basically it works just like Yacc/Bison.
 * See http://en.wikipedia.org/wiki/YACC
 *)

open Re		    (* RE abstract syntax 	*)

let error msg	= failwith msg

# 33 "parse.ml"
let yytransl_const = [|
  259 (* DOT *);
  260 (* LBRACKET *);
  261 (* RBRACKET *);
  262 (* MINUS *);
  263 (* EMPTY *);
  264 (* BAR *);
  265 (* STAR *);
  266 (* PLUS *);
  267 (* QUESTION *);
  268 (* LPAREN *);
  269 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* STRING *);
  258 (* CHAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\003\000\003\000\001\000\001\000\001\000\001\000\005\000\002\000\
\003\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\013\000\004\000\003\000\006\000\000\000\
\005\000\000\000\000\000\000\000\000\000\000\000\010\000\011\000\
\012\000\001\000\000\000\000\000\002\000\000\000\000\000\007\000"

let yydgoto = "\002\000\
\004\000\019\000"

let yysindex = "\255\255\
\006\255\000\000\002\255\000\000\000\000\000\000\000\000\025\255\
\000\000\002\255\015\000\033\255\009\255\002\255\000\000\000\000\
\000\000\000\000\034\255\026\255\000\000\022\255\003\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\002\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\037\000"

let yytablesize = 283
let yytable = "\001\000\
\008\000\009\000\005\000\006\000\007\000\008\000\003\000\024\000\
\009\000\005\000\006\000\007\000\008\000\010\000\018\000\009\000\
\014\000\015\000\016\000\017\000\010\000\021\000\005\000\006\000\
\007\000\008\000\012\000\023\000\009\000\014\000\015\000\016\000\
\017\000\010\000\005\000\006\000\007\000\008\000\020\000\011\000\
\009\000\014\000\015\000\000\000\000\000\010\000\013\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\008\000\000\000\008\000\009\000\005\000\
\006\000\007\000\008\000\000\000\000\000\009\000\014\000\015\000\
\016\000\017\000\010\000"

let yycheck = "\001\000\
\000\000\000\000\001\001\002\001\003\001\004\001\001\001\005\001\
\007\001\001\001\002\001\003\001\004\001\012\001\000\000\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\001\001\002\001\
\003\001\004\001\002\001\002\001\007\001\008\001\009\001\010\001\
\011\001\012\001\001\001\002\001\003\001\004\001\006\001\003\000\
\007\001\008\001\009\001\255\255\255\255\012\001\010\000\255\255\
\255\255\255\255\014\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\255\255\013\001\013\001\001\001\
\002\001\003\001\004\001\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\012\001"

let yynames_const = "\
  DOT\000\
  LBRACKET\000\
  RBRACKET\000\
  MINUS\000\
  EMPTY\000\
  BAR\000\
  STAR\000\
  PLUS\000\
  QUESTION\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  STRING\000\
  CHAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 're) in
    Obj.repr(
# 45 "parse.mly"
                        ( (_1, _2) )
# 188 "parse.ml"
               : string * Re.re))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 're) in
    Obj.repr(
# 48 "parse.mly"
                          ( _2 )
# 195 "parse.ml"
               : 're))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 49 "parse.mly"
                          ( Char(_1) )
# 202 "parse.ml"
               : 're))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 51 "parse.mly"
  ( 
    let char_list = string_to_re_string _1 in 
    match char_list with
    | [] -> error "you may not use an empty string in a regular expression" 
    | hd :: tl -> begin
      List.fold_left (fun acc elt -> Concat(acc,Char(elt)))
        (Char(hd)) tl 
    end 
  )
# 217 "parse.ml"
               : 're))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parse.mly"
                          ( Empty )
# 223 "parse.ml"
               : 're))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parse.mly"
                          ( AnyChar )
# 229 "parse.ml"
               : 're))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : char) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : char) in
    Obj.repr(
# 63 "parse.mly"
    ( 
      let c1 = _2 in
      let c2 = _4 in
      if c1 < c2 then CharRange(c1,c2)
      else CharRange(c2,c1) 
    )
# 242 "parse.ml"
               : 're))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 're) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 're) in
    Obj.repr(
# 69 "parse.mly"
                         ( Concat(_1,_2) )
# 250 "parse.ml"
               : 're))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 're) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 're) in
    Obj.repr(
# 70 "parse.mly"
                         ( Or(_1,_3) )
# 258 "parse.ml"
               : 're))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 're) in
    Obj.repr(
# 71 "parse.mly"
                         ( Star(_1) )
# 265 "parse.ml"
               : 're))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 're) in
    Obj.repr(
# 72 "parse.mly"
                         ( Plus(_1) )
# 272 "parse.ml"
               : 're))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 're) in
    Obj.repr(
# 73 "parse.mly"
                         ( Question(_1) )
# 279 "parse.ml"
               : 're))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : string * Re.re)
