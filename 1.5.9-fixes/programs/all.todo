{TODO 4 -cFALTA : OS.PROCESS
encapsulamiento de procesos falta: Enum, EnumThreads, Finds, Kills, & IPC general ...}
{TODO 5 -cFALTA : OS.WINDOWSYSTEM
Terminar el manejo de ventanas }
{TODO 5 -cNUEVO : LIB.ADT
Containers abstractos }
{TODO 1 -cNUEVO : LIB.LIST
Diferenciar las listas para poder hacer versiones read-only }
{TODO 3 -cFALTA : OS.REGISTRY
Lector de configuración genérico falta agregar más implementaciones }
{TODO 4 -cFALTA : LIB.ADT
Encapsular estructuras de datos usando interfaces (Tree, List, Queue, etc.)}
{TODO 2 -cFALTA : OS.FILESYSTEM
En el FileSystem implementar el acceso a directorios ... (Create, Change) }
{TODO 4 -cFALTA : OS.SECURITY
Encapsulamiento del sistema de seguridad para acceso a objetos.}
{TODO 5 -cFALTA : OS.PROCESS
Implementar la enumeración de modulos cargados por un proceso, y por el proceso actual en particular. }
{TODO 3 -cNUEVO : TOOL.MATH
Librería Matematica para calculo.}
{TODO 4 -cFALTA : LIB.TRACE
Terminar el manejo de log desde la lib. Agregar loggin dentro de la misma lib. }
{TODO 2 -cFALTA : TOOL.COMMS.LAYERS
Terminar layers de comunicaciones }
{TODO 3 -cNUEVO : TOOL.DATA.DB
Implementar un motor que ejecute primitivas relacionales, p ej: join, select, etc. }
{TODO 3 -cNUEVO : TOOL.DATA.DB
Implementar un parser de SQL propio. }
{TODO 3 -cORGANIZAR : BASE/LIB
Pasar interfaces, tales como IEnumerable, IConnectable, etc, a la capa base. }
{TODO 1 -cFALTA : DOCUMENTACION
Documentación de toda la lib }
{TODO 3 -cFALTA : TOOL.DATA.DB
IDataRecord }
{TODO 3 -cFALTA : TOOL.DATA.DB
terminar la clonacion de IDataRowset }
{TODO 1 -cNUEVO : LIB.LOCK
Definir IMultiLockable }
{TODO 2 -cNUEVO : LIB.LOCK
Implementar varias IMultiLocakbles default usando (ILockable) y usando ReadWriteLock. }
{TODO 2 -cNUEVO : LIB.LIST/LOCK
Cambiar las listas para que usen IMultiLocakble y llamen al read lock o write lock de acuerdo al caso }
{TODO 2 -cNUEVO : LIB.LIST/LOCK
Cambiar las listas para que se le pueda especificar el locker a usar }
{TODO 1  -cNUEVO-LOCK : LIB.LIST/LOCK
Agregar como detalle a tener en cuenta lo siguiente: despues de que alguien pidio un lock de lectura, memorizarlo y si ese mismo alguien pide un lock de escritura, se genere una excepción para evitar deadlocks }
{TODO 1 -cNUEVO : LIB.LIST
En InterfaceList se puede reimplementar el InterfaceHandler para que este nuevo asuma que el DATA es el GUID de la interface que la lista debe contener. }
{TODO 2 -cNUEVO : LIB.ADT
Definir interfaces que provean los metodos de la lista base (TList) a los usuarios externos. }
{TODO 1 -cCORREGIR : LIB.LIST
Quitar de la IList todos aquellos metodos que modifican el contenido de la lista }
{TODO 2 -cNUEVO : OS.FILE
Implementar un paginador de archivos para poder alocar bloques y despues indexarlos por numero de página }
{TODO 2 -cNUEVO : OS.FILE
Implementar un organizador de páginas para poder subdividir archivos en multiples streams individuales }
{TODO 5 -cFALTA : OS.FILESYSTEM
Abstractizar la clases OS.FileSystem para que pueda usar estos organizadores y permitir ver el contenido de un archivos como un filesystem standar }
{TODO 1 -cNUEVO : TYPEINFO
Definir interfaces que representen el RTTI y implementarlas para poder acceder al TypeInfo de Delphi }
{TODO 2 -cNUEVO : LIB.HANDLER/TYPEINFO
Implementar un Handler para records dinamicos que utilize la typeinfo de los records inicializables }
{TODO 2 -cNUEVO : LIB.EVENTS/TYPEINFO
Implementar un disparador de eventos que invente las interfaces de los sinks que contiene y que provea una implementacion default de todos los fire }
{DONE 1 -cORGANIZAR: OS.REGISTRY
Renombrar el OS.Configuration por OS.Registry. }
{TODO 3 -cNUEVO : 
LIB
Dar vida a la IObject}

